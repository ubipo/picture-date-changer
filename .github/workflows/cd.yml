name: Continuous Deployment / Release
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+**'
  workflow_dispatch:

env:
  IMAGE_MAGICK_VERSION: 7.1.0-58

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: get version
        run: echo "PACKAGE_VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.PACKAGE_VERSION}`,
              name: `v${process.env.PACKAGE_VERSION}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })

            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [
          # TODO: Add gexiv2 macos dependency
          # macos-latest,
          # ubuntu-20.04,
          windows-latest
        ]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        # You can remove libayatana-appindicator3-dev if you don't use the system tray feature.
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev \
            libayatana-appindicator3-dev librsvg2-dev \
            libx11-dev libxext-dev zlib1g-dev libpng-dev libjpeg-dev libfreetype6-dev libxml2-dev\
            libgexiv2-dev

      - name: Install ImageMagick 7 (Ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          wget -O ImageMagick-7.tar.gz \
            "https://download.imagemagick.org/archive/ImageMagick-$IMAGE_MAGICK_VERSION.tar.gz"
          mkdir ImageMagick-7
          tar -xf ImageMagick-7.tar.gz -C ImageMagick-7 --strip-components=1
          cd ImageMagick-7
          ./configure
          make -j$(nproc)
          sudo make install
          sudo ldconfig /usr/local/lib
          echo "Version: $(magick -version)"

      - name: Install dependencies (Windows only)
        if: matrix.platform == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          update: true
          location: RUNNER_TEMP
          install: >-
            mingw-w64-x86_64-gexiv2
            mingw-w64-x86_64-imagemagick

      - name: Set PKG_CONFIG_PATH (Windows only)
        run: |
          # Msys2 is installed in RUNNER_TEMP / setup-msys2
          echo "PKG_CONFIG_PATH=${{ runner.temp }}/msys64/mingw64" >> ${{ github.env }}
      
      - name: Test(Windows only)
        run: |
          echo "Runner temp: >>$RUNNER_TEMP<<"
          echo "Runner temp context: >>${{ runner.temp }}<<"
          echo "PKG_CONFIG_PATH: >>${{ env.PKG_CONFIG_PATH }}<<"
          echo "PKG_CONFIG_PATH tree: "
          tree "${{ env.PKG_CONFIG_PATH }}"
          echo "Msys2 bin location: "
          echo "Exiting early..."
          exit 1
          
      - name: Python setup
        uses: actions/setup-python@v4
        with:
          python-version: '3.10' 

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './host -> target'

      - name: Node setup
        uses: actions/setup-node@v3
        with:
          node-version: '19'
          cache: 'npm'
          cache-dependency-path: 'ui/package-lock.json'

      - name: Install UI dependencies
        working-directory: ./ui
        run: npm install

      - name: Build the app
        uses: tauri-apps/tauri-action@v0

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [create-release, build-tauri]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
